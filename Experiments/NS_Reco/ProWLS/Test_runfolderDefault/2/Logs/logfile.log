Module path:  Environments.NS_Reco NS_Reco
Dynamically loaded from:  <class 'Environments.NS_Reco.NS_Reco'>
Reward Amplitudes: [4.17022005e-01 7.20324493e-01 1.14374817e-04 3.02332573e-01
 1.46755891e-01] :: Avg 0.317309867282206 
Module path:  Src.Algorithms.ProWLS ProWLS
Dynamically loaded from:  <class 'Src.Algorithms.ProWLS.ProWLS'>
=====Configurations=====
 Namespace(NN_basis_dim='32', Policy_basis_dim='32', actor_lr=0.01, algo_name='ProWLS', base=0, batch_size=1000, buffer_size=1000, debug=True, delta=5, entropy_lambda=0.1, env_name='NS_Reco', experiment='Test_runfolder', extrapolator_basis='Poly', folder_suffix='Default', fourier_coupled=True, fourier_k=7, fourier_order=-1, gamma=0.99, gauss_std=1.5, gpu=0, hyper='default', importance_clip=10.0, inc=1, log_output='term_file', max_episodes=3000, max_inner=150, max_steps=500, optim='rmsprop', oracle=-1000, raw_basis=True, restore=False, save_count=10, save_model=True, seed=2, speed=2, state_lr=0.001, summary=True, swarm=False, timestamp='9|20|16:9:50')
Actions space: 5 :: State space: 1
State Low: tensor([0.]) :: State High: tensor([1.])
State features:  [('dummy_param', torch.Size([1]))]
Policy:  [('fc1.weight', torch.Size([5, 1])), ('fc1.bias', torch.Size([5]))]
0 :: Rewards -0.012 :: steps: 0.00 :: Time: 0.000(0.00066/step) :: Entropy : 0.000 :: Grads : [[], []]
